package museon_online.astor_butler.fsm;

import lombok.RequiredArgsConstructor;
import museon_online.astor_butler.location.Location;
import museon_online.astor_butler.location.LocationRepository;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Component
@RequiredArgsConstructor
public class BookingHandler {

    private final UserSessionManager sessionManager;
    private final LocationRepository locationRepository;

    public String handle(Update update) {
        Long userId = update.getMessage().getFrom().getId();
        UserSession session = sessionManager.getOrCreateSession(userId);
        Message message = update.getMessage();

        return switch (session.getState()) {
            case SELECTING_LOCATION -> handleLocationSelection(session, message);
            case SELECTING_DATE    -> handleDateSelection(session, message);
            case SELECTING_SLOT    -> handleSlotSelection(session, message);
            case CONFIRMING        -> handleConfirmation(session, message);
            default                -> "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï";
        };
    }

    private String handleLocationSelection(UserSession session, Message message) {
        String input = message.getText().trim();
        List<Location> locations = locationRepository.findAll();

        for (Location location : locations) {
            if (location.getName().equalsIgnoreCase(input)) {
                session.setLocationId(location.getId());
                session.setState(BookingState.SELECTING_DATE);
                return "üìÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):";
            }
        }

        String allNames = locations.stream()
                .map(Location::getName)
                .collect(Collectors.joining("\n- "));
        return "üè† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π:\n\n- " + allNames;
    }

    private String handleDateSelection(UserSession session, Message message) {
        String input = message.getText().trim();
        try {
            session.setDate(LocalDate.parse(input));
            session.setState(BookingState.SELECTING_SLOT);
            return "üïí –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):";
        } catch (DateTimeParseException e) {
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.";
        }
    }

    private String handleSlotSelection(UserSession session, Message message) {
        String input = message.getText().trim();
        session.setSlotId(UUID.nameUUIDFromBytes(input.getBytes())); // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ actual slot ID –ø–æ–∑–∂–µ
        session.setState(BookingState.CONFIRMING);
        return String.format("üßæ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –±—Ä–æ–Ω—å?\nüìç %s\nüìÖ %s\nüïí %s\n\n–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                session.getLocationId(), session.getDate(), input);
    }

    private String handleConfirmation(UserSession session, Message message) {
        String input = message.getText().trim().toLowerCase();
        return switch (input) {
            case "–¥–∞"  -> "‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥—ë–º –≤–∞—Å!";
            case "–Ω–µ—Ç" -> {
                sessionManager.clearSession(session.getUserId());
                yield "‚ùå –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞?";
            }
            default -> "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.";
        };
    }
}
