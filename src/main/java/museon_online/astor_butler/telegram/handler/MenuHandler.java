package museon_online.astor_butler.telegram.handler;

import lombok.RequiredArgsConstructor;
import museon_online.astor_butler.reference.MenuCategory;
import museon_online.astor_butler.reference.MenuPdf;
import museon_online.astor_butler.reference.MenuPdfService;
import museon_online.astor_butler.telegram.command.BotCommand;
import museon_online.astor_butler.telegram.command.BotResponse;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
public class MenuHandler implements BotCommand {

    private final MenuPdfService menuPdfService;

    @Override
    public String getCommand() {
        return "menu_handler"; // –∑–∞–≥–ª—É—à–∫–∞, –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
    }

    @Override
    public String getDescription() {
        return "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PDF-–º–µ–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º";
    }

    @Override
    public BotResponse execute(Update update) {
        if (!update.hasCallbackQuery()) {
            return new BotResponse("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.");
        }

        String callbackData = update.getCallbackQuery().getData();
        if (!callbackData.startsWith("menu:")) {
            return new BotResponse("üòï –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é.");
        }

        MenuCategory category = resolveCategory(callbackData);
        List<MenuPdf> pdfList = menuPdfService.getPdfMenu(category);

        if (pdfList.isEmpty()) {
            return new BotResponse("üì≠ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ–Ω—é.");
        }

        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for (MenuPdf pdf : pdfList) {
            keyboard.add(List.of(
                    InlineKeyboardButton.builder()
                            .text(pdf.getTitle())
                            .url(pdf.getFileUrl())  // –ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ç–∏–ø–∞ https://your-bot.com/menu/pdf/{id}
                            .build()
            ));
        }

        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(keyboard).build();
        return new BotResponse("üìÑ –í—ã–±–µ—Ä–∏—Ç–µ PDF:", markup);
    }

    private MenuCategory resolveCategory(String callbackData) {
        try {
            return MenuCategory.valueOf(callbackData.replace("menu:", "").toUpperCase());
        } catch (IllegalArgumentException e) {
            return MenuCategory.AERIS_MENU; // fallback
        }
    }
}