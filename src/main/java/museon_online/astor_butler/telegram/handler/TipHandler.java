package museon_online.astor_butler.telegram.handler;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import museon_online.astor_butler.finance.balance.BalanceService;
import museon_online.astor_butler.finance.balance.WalletType;
import museon_online.astor_butler.telegram.utils.AstorUpdate;
import museon_online.astor_butler.tip.TipState;
import museon_online.astor_butler.tip.TipUserContext;
import museon_online.astor_butler.tip.TipUserStateService;
import museon_online.astor_butler.user.model.User;
import museon_online.astor_butler.user.service.UserService;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;

@Slf4j
@Component
@RequiredArgsConstructor
public class TipHandler implements AstorBotHandler {

    private final TipUserStateService tipStateService;
    private final BalanceService balanceService;
    private final UserService userService;

    @Override
    public boolean appliesTo(AstorUpdate update) {
        return update.text() != null && (update.text().startsWith("/tip")
                || tipStateService.getState(update.raw().getMessage().getFrom().getId()) != null);
    }

    @Override
    public void handle(AstorUpdate update) {
        Long telegramId = update.raw().getMessage().getFrom().getId();
        String text = update.text();

        TipState state = tipStateService.getState(telegramId);

        if (state == null) {
            update.reply("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∞–µ–≤—ã—Ö (–≤ —Ä—É–±–ª—è—Ö):");
            tipStateService.setState(telegramId, TipState.AWAITING_AMOUNT);
            return;
        }

        switch (state) {
            case AWAITING_AMOUNT -> {
                try {
                    BigDecimal amount = new BigDecimal(text);
                    tipStateService.setContext(telegramId, new TipUserContext(amount));
                    tipStateService.setState(telegramId, TipState.CONFIRMATION);
                    update.reply("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ " + amount + " ‚ÇΩ. –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.");
                } catch (Exception e) {
                    update.reply("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∞–µ–≤—ã—Ö");
                }
            }
            case CONFIRMATION -> {
                if (text.equalsIgnoreCase("–¥–∞")) {
                    TipUserContext context = tipStateService.getContext(telegramId);
                    User user = userService.findUserByTelegramId(telegramId.toString());
                    balanceService.charge(user.getId(), context.getAmount(), WalletType.RUB, "–ß–∞–µ–≤—ã–µ —á–µ—Ä–µ–∑ –±–æ—Ç");
                    update.reply("üôè –°–ø–∞—Å–∏–±–æ! –ß–∞–µ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.");
                    tipStateService.clear(telegramId);
                } else {
                    update.reply("‚ùå –ß–∞–µ–≤—ã–µ –æ—Ç–º–µ–Ω–µ–Ω—ã.");
                    tipStateService.clear(telegramId);
                }
            }
        }
    }
}
