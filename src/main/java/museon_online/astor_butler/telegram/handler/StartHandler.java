package museon_online.astor_butler.telegram.handler;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import museon_online.astor_butler.telegram.utils.BotResponse;
import museon_online.astor_butler.telegram.command.StartCommand;
import museon_online.astor_butler.telegram.command.MainMenuCommand;
import museon_online.astor_butler.telegram.utils.AstorUpdate;
import museon_online.astor_butler.telegram.exception.TelegramExceptionHandler;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class StartHandler {

    private final MainMenuCommand mainMenuCommand;
    private final StartCommand startCommand;
    private final TelegramExceptionHandler exceptionHandler;

    public BotResponse handle(Update update) {
        AstorUpdate astor = new AstorUpdate(update);
        try {
            if (astor.text() != null && "‚¨ÖÔ∏è –ù–∞–∑–∞–¥".equals(astor.text().trim())) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥', –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ StartCommand");
                return startCommand.execute(update);
            }

            String data = astor.raw().getCallbackQuery().getData();
            Long chatId = astor.chatId();

            return switch (data) {
                case "policy:agree" -> buildRequestPhoneNumberResponse();
                case "policy:decline" -> new BotResponse("–ü–æ–Ω–∏–º–∞—é. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start.");
                default -> {
                    log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data –≤ StartHandler: {}", data);
                    yield new BotResponse("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            };
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≤ StartHandler", e);
            return new BotResponse("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private BotResponse buildRequestPhoneNumberResponse() {
        KeyboardButton contactButton = new KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        contactButton.setRequestContact(true);

        KeyboardButton backButton = new KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");

        KeyboardRow row1 = new KeyboardRow();
        row1.add(contactButton);

        KeyboardRow row2 = new KeyboardRow();
        row2.add(backButton);

        ReplyKeyboardMarkup replyMarkup = new ReplyKeyboardMarkup();
        replyMarkup.setKeyboard(List.of(row1, row2));
        replyMarkup.setResizeKeyboard(true);
        replyMarkup.setOneTimeKeyboard(true);

        return BotResponse.withReplyKeyboard(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –í–∞–º–∏.\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É.",
                replyMarkup
        );
    }
}